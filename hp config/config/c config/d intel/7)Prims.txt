#include<stdio.h>

int dist[20], par[20], v[20], n, s;
int g[20][20];

void initialise_single_source() {
    for(int i = 0; i < n; i++) {
        dist[i] = 10000;
        par[i] = -1;
        // v[i] = 0;
    }
    dist[s] = 0;
}

int find_min() {
    int min = 1000;
    int temp = -1;
    for(int i = 0; i < n; i++) {
        if(dist[i] < min && v[i] == 0) {
            temp = i;
            min = dist[i];
        }
    }
    v[temp] = 1;
    return temp;
}

void relax(int u, int v) {
    if(dist[v] > g[u][v]) {
        dist[v] = g[u][v];
        par[v] = u;
    }
}

void display() {
    int sum = 0;
    printf("dist\tpar\n");
    for(int i = 0; i < n; i++) {
        printf("%d\t%d\n", dist[i], par[i]);
        sum = sum + dist[i];
    }
    printf("total cost of MST: %d", sum);
}

void prim() {
    initialise_single_source();
    for(int i = 0; i < n; i++) {
        int u = find_min();
        for(int j = 0; j < n; j++) {
            if(g[u][j] != 0 && v[j] == 0) {
                relax(u, j);
            }
        }
    }
    display();
}

int main() {
    printf("Enter the number of vertices (max 20): ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix for the graph:\n");
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf("%d", &g[i][j]);
        }
    }

    printf("Graph:\n");
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            printf("%d ", g[i][j]);
        }
        printf("\n");
    }

    printf("Enter starting point (0 to %d): ", n - 1);
    scanf("%d", &s);
    if(s < 0 || s >= n) {
        printf("Invalid starting point.\n");
        return 1; // Exit with error
    }

    printf("Minimum Spanning Tree:\n");
    prim();
    
    return 0;
}
