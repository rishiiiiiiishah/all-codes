#include<stdio.h>
#include<string.h>

#define d 256 // A prime number
#define q 101 // Another prime number

void RK(const char T[], const char P[]) {
    int n = strlen(T);
    int m = strlen(P);
    int h = 1;
    int p = 0, t = 0;

    // Calculate h: d^(m-1) % q
    for (int i = 0; i < m - 1; i++) {
        h = (h * d) % q;
    }

    // Calculate initial hash values for pattern and the first window of text
    for (int i = 0; i < m; i++) {
        p = (d * p + P[i]) % q;
        t = (d * t + T[i]) % q;
    }

    for (int s = 0; s <= n - m; s++) {
        // Check if the hash values match
        if (p == t) {
            int j;
            // Check each character of pattern against text
            for (j = 0; j < m; j++) {
                if (T[s + j] != P[j])
                    break;
            }
            if (j == m) {
                printf("Pattern occurs with shift %d\n", s);
            }
        }
        // Update hash value for next window of text
        if (s < n - m) {
            t = (d * (t - T[s] * h) + T[s + m]) % q;
            if (t < 0) // Ensure t is positive
                t = t + q;
        }
    }
}

int main() {
    char T[100], P[100];

    printf("*** Rabin Karp Algorithm ***\n");
    printf("Enter the Text:\n");
    scanf("%99s", T);
    printf("Enter the Pattern:\n");
    scanf("%99s", P);

    RK(T, P);
    return 0;
}
