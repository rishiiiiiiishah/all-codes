#include <stdio.h>

void implementFirstFit(int blockSize[], int blocks, int processSize[], int processes)
{
    int allocation[processes];
    int occupied[blocks];
    int totalMemoryOccupied = 0;

    for (int i = 0; i < processes; i++)
    {
        allocation[i] = -1;
    }

    for (int i = 0; i < blocks; i++)
    {
        occupied[i] = 0;
    }

    for (int i = 0; i < processes; i++)
    {
        for (int j = 0; j < blocks; j++)
        {
            if (blockSize[j] >= processSize[i] && !occupied[j])
            {
                allocation[i] = j;
                occupied[j] = 1;
                totalMemoryOccupied += processSize[i];
                break; // Break after allocating the process to the first available block
            }
        }
    }

    int totalMemoryAvailable = 0;
    for (int i = 0; i < blocks; i++)
    {
        totalMemoryAvailable += blockSize[i];
    }

    float memoryUtilization = (float)totalMemoryOccupied / totalMemoryAvailable * 100;

    printf("\nFirst Fit Memory Allocation:\n");
    printf("Process No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < processes; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    printf("Memory Utilization: %.2f%%\n", memoryUtilization);
}

void implementBestFit(int blockSize[], int blocks, int processSize[], int processes)
{
    int allocation[processes];
    int occupied[blocks];
    int totalMemoryOccupied = 0;

    for (int i = 0; i < processes; i++)
    {
        allocation[i] = -1;
    }

    for (int i = 0; i < blocks; i++)
    {
        occupied[i] = 0;
    }

    for (int i = 0; i < processes; i++)
    {
        int indexPlaced = -1;
        for (int j = 0; j < blocks; j++)
        {
            if (blockSize[j] >= processSize[i] && !occupied[j])
            {
                if (indexPlaced == -1)
                    indexPlaced = j;
                else if (blockSize[j] < blockSize[indexPlaced])
                    indexPlaced = j;
            }
        }

        if (indexPlaced != -1)
        {
            allocation[i] = indexPlaced;
            occupied[indexPlaced] = 1;
            totalMemoryOccupied += processSize[i];
        }
    }

    int totalMemoryAvailable = 0;
    for (int i = 0; i < blocks; i++)
    {
        totalMemoryAvailable += blockSize[i];
    }

    float memoryUtilization = (float)totalMemoryOccupied / totalMemoryAvailable * 100;

    printf("\nBest Fit Memory Allocation:\n");
    printf("Process No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < processes; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    printf("Memory Utilization: %.2f%%\n", memoryUtilization);
}

void implementWorstFit(int blockSize[], int blocks, int processSize[], int processes)
{
    int allocation[processes];
    int occupied[blocks];
    int totalMemoryOccupied = 0;

    for (int i = 0; i < processes; i++)
    {
        allocation[i] = -1;
    }

    for (int i = 0; i < blocks; i++)
    {
        occupied[i] = 0;
    }

    for (int i = 0; i < processes; i++)
    {
        int indexPlaced = -1;
        int maxBlockSize = -1;
        for (int j = 0; j < blocks; j++)
        {
            if (blockSize[j] >= processSize[i] && !occupied[j])
            {
                if (blockSize[j] > maxBlockSize)
                {
                    maxBlockSize = blockSize[j];
                    indexPlaced = j;
                }
            }
        }

        if (indexPlaced != -1)
        {
            allocation[i] = indexPlaced;
            occupied[indexPlaced] = 1;
            totalMemoryOccupied += processSize[i];
        }
    }

    int totalMemoryAvailable = 0;
    for (int i = 0; i < blocks; i++)
    {
        totalMemoryAvailable += blockSize[i];
    }

    float memoryUtilization = (float)totalMemoryOccupied / totalMemoryAvailable * 100;

    printf("\nWorst Fit Memory Allocation:\n");
    printf("Process No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < processes; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    printf("Memory Utilization: %.2f%%\n", memoryUtilization);
}

void implementNextFit(int blockSize[], int blocks, int processSize[], int processes)
{
    int allocation[processes];
    int occupied[blocks];
    int totalMemoryOccupied = 0;

    for (int i = 0; i < processes; i++)
    {
        allocation[i] = -1;
    }

    for (int i = 0; i < blocks; i++)
    {
        occupied[i] = 0;
    }

    int lastIndex = 0; // Keep track of the last block allocated

    for (int i = 0; i < processes; i++)
    {
        for (int j = lastIndex; j < blocks; j++) // Start searching from the last allocated block
        {
            if (blockSize[j] >= processSize[i] && !occupied[j])
            {
                allocation[i] = j;
                occupied[j] = 1;
                totalMemoryOccupied += processSize[i];
                lastIndex = j; // Update the last allocated block
                break; // Break after allocating the process to the first available block
            }
        }
    }

    int totalMemoryAvailable = 0;
    for (int i = 0; i < blocks; i++)
    {
        totalMemoryAvailable += blockSize[i];
    }

    float memoryUtilization = (float)totalMemoryOccupied / totalMemoryAvailable * 100;

    printf("\nNext Fit Memory Allocation:\n");
    printf("Process No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < processes; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    printf("Memory Utilization: %.2f%%\n", memoryUtilization);
}

int main()
{
    int m, n, blockSize[100], processSize[100];
    printf("Enter the number of blocks: ");
    scanf("%d", &m);
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    for (int i = 0; i < m; i++)
    {
        printf("Enter the size of block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }
    for (int i = 0; i < n; i++)
    {
        printf("Enter the size of process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    int choice;
    do
    {
        printf("\nMemory Allocation Techniques:\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Next Fit\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            implementFirstFit(blockSize, m, processSize, n);
            break;
        case 2:
            implementBestFit(blockSize, m, processSize, n);
            break;
        case 3:
            implementWorstFit(blockSize, m, processSize, n);
            break;
        case 4:
            implementNextFit(blockSize, m, processSize, n);
            break;
        case 5:
            printf("Exiting...\n");
            break;
        default:
            printf("Invalid choice. Please enter a number between 1 and 5.\n");
        }
    } while (choice != 5);

    return 0;
}
